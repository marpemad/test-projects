import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

train = pd.read_table("C:/Users/Nicolas/Documents/DataMining/KaggleFiles/train.txt", index_col=0)
test = pd.read_table("C:/Users/Nicolas/Documents/DataMining/KaggleFiles/test.txt", index_col=0)

train_list = []
for line in open("C:/Users/Nicolas/Documents/DataMining/KaggleFiles/train.txt", 'r'):
    line.replace('\"', '').replace('\\', '').replace('/', '').strip()
    train_list.append(line.lower().replace(',', '').replace('.', '').replace('\'', '').replace('n\'t', '').strip()[:-1])

test_list = []
for line in open("C:/Users/Nicolas/Documents/DataMining/KaggleFiles/test.txt", 'r'):
    line.replace('\"', '').replace('\\', '').replace('/', '').strip()
    test_list.append(line.lower().replace(',', '').replace('.', '').replace('\'', '').replace('n\'t', '').strip())

cv = CountVectorizer(binary=True)
cv.fit(train_list)
X = cv.transform(train_list)
X_test = cv.transform(test_list)

target_list = []
for line in open("C:/Users/Nicolas/Documents/DataMining/KaggleFiles/train.txt", 'r'):
    target_list.append(line[-2])

X_train, X_val, y_train, y_val = train_test_split(X, target_list, test_size=0.25)

for c in [0.01, 0.05, 0.25, 0.5, 0.75, 1]:
    lr = LogisticRegression(C=c, solver='lbfgs', max_iter=1000)
    lr.fit(X_train, y_train)
    print("Accuracy for C=%s: %s" % (c, accuracy_score(y_val, lr.predict(X_val))))

final_model = LogisticRegression(C=0.5)
final_model.fit(X, target_list)
print ("Final Accuracy: %s"
       % accuracy_score(target_list, final_model.predict(X_test)))

feature_to_coef = {
    word: coef for word, coef in zip(
    cv.get_feature_names(), final_model.coef_[0]
)
}

for best_positive in sorted(
        feature_to_coef.items(),
        key=lambda x: x[1],
        reverse=True)[:5]:
    print(best_positive)

for best_negative in sorted(
        feature_to_coef.items(),
        key=lambda x: x[1])[:5]:
    print(best_negative)
